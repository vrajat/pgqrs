
name: CI
on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          # Configure MD5 authentication for PgBouncer compatibility
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      pgbouncer:
        image: edoburu/pgbouncer:latest
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
          POOL_MODE: session
          AUTH_TYPE: md5
          MAX_CLIENT_CONN: 100
          DEFAULT_POOL_SIZE: 20
          ADMIN_USERS: postgres
          STATS_USERS: postgres
        options: >-
          --health-cmd "PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres pgbouncer -c 'SHOW USERS' >/dev/null"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6432:5432

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
      - uses: actions-rust-lang/rustfmt@v1

      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Build
        run: cargo build --verbose

      - name: Run tests
        run: cargo test --verbose --no-fail-fast
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
          PGQRS_TEST_DSN: postgres://postgres:postgres@localhost:5432/postgres

      - name: Run PgBouncer tests
        run: cargo test --verbose --no-fail-fast
        env:
          PGQRS_TEST_USE_PGBOUNCER: 1
          PGQRS_TEST_DSN: postgres://postgres:postgres@localhost:6432/postgres

  release:
    name: Publish crate (Trusted Publishing)
    runs-on: ubuntu-latest
    needs: build  # Wait for build job to complete successfully

    # optional: ensure only one publish per tag
    concurrency:
      group: publish-${{ github.ref }}
      cancel-in-progress: false

    if: startsWith(github.ref, 'refs/tags/v')

    # Required for OIDC â†’ crates.io token exchange
    permissions:
      id-token: write
      contents: read

    # Optional: require manual approval via GitHub Environments
    # (If you set this, use the same environment name when creating the Trusted Publisher on crates.io)
    # environment: release

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
          # Configure MD5 authentication for PgBouncer compatibility
          POSTGRES_HOST_AUTH_METHOD: md5
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      pgbouncer:
        image: edoburu/pgbouncer:latest
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres
          POOL_MODE: session
          AUTH_TYPE: md5
          MAX_CLIENT_CONN: 100
          DEFAULT_POOL_SIZE: 20
          ADMIN_USERS: postgres
          STATS_USERS: postgres
        options: >-
          --health-cmd "PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres pgbouncer -c 'SHOW USERS' >/dev/null"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10
        ports:
          - 6432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # If you already pin toolchain via rust-toolchain file, you can omit this
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y libpq-dev

      - name: Cache cargo artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      # Optional sanity checks before publishing
      - name: Build & test
        run: |
          cargo build --release --locked
          cargo test --release --locked
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
          PGQRS_TEST_DSN: postgres://postgres:postgres@localhost:5432/postgres

      - name: Test PgBouncer configuration
        run: cargo test --release --locked
        env:
          PGQRS_TEST_USE_PGBOUNCER: 1
          PGQRS_TEST_DSN: postgres://postgres:postgres@localhost:6432/postgres

      # Get short-lived crates.io token via OIDC
      - name: Authenticate with crates.io (Trusted Publishing)
        id: auth
        uses: rust-lang/crates-io-auth-action@v1

      # Package, verify, then publish using the short-lived token
      - name: Publish to crates.io
        run: |
          cargo package --list
          cargo publish --dry-run --locked
          cargo publish --locked